/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as PasswordResetRouteImport } from "./routes/password-reset";
import { Route as LoginRouteImport } from "./routes/login";
import { Route as AboutRouteImport } from "./routes/about";
import { Route as AuthenticatedRouteImport } from "./routes/_authenticated";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AuthenticatedDashboardRouteImport } from "./routes/_authenticated/dashboard";
import { Route as AuthenticatedCustomersRouteImport } from "./routes/_authenticated/customers";

const PasswordResetRoute = PasswordResetRouteImport.update({
  id: "/password-reset",
  path: "/password-reset",
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any);
const AboutRoute = AboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: "/_authenticated",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AuthenticatedRoute,
} as any);
const AuthenticatedCustomersRoute = AuthenticatedCustomersRouteImport.update({
  id: "/customers",
  path: "/customers",
  getParentRoute: () => AuthenticatedRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/password-reset": typeof PasswordResetRoute;
  "/customers": typeof AuthenticatedCustomersRoute;
  "/dashboard": typeof AuthenticatedDashboardRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/password-reset": typeof PasswordResetRoute;
  "/customers": typeof AuthenticatedCustomersRoute;
  "/dashboard": typeof AuthenticatedDashboardRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/_authenticated": typeof AuthenticatedRouteWithChildren;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/password-reset": typeof PasswordResetRoute;
  "/_authenticated/customers": typeof AuthenticatedCustomersRoute;
  "/_authenticated/dashboard": typeof AuthenticatedDashboardRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/about" | "/login" | "/password-reset" | "/customers" | "/dashboard";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/about" | "/login" | "/password-reset" | "/customers" | "/dashboard";
  id:
    | "__root__"
    | "/"
    | "/_authenticated"
    | "/about"
    | "/login"
    | "/password-reset"
    | "/_authenticated/customers"
    | "/_authenticated/dashboard";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren;
  AboutRoute: typeof AboutRoute;
  LoginRoute: typeof LoginRoute;
  PasswordResetRoute: typeof PasswordResetRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/password-reset": {
      id: "/password-reset";
      path: "/password-reset";
      fullPath: "/password-reset";
      preLoaderRoute: typeof PasswordResetRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_authenticated": {
      id: "/_authenticated";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthenticatedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_authenticated/dashboard": {
      id: "/_authenticated/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
    "/_authenticated/customers": {
      id: "/_authenticated/customers";
      path: "/customers";
      fullPath: "/customers";
      preLoaderRoute: typeof AuthenticatedCustomersRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedCustomersRoute: typeof AuthenticatedCustomersRoute;
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute;
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCustomersRoute: AuthenticatedCustomersRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
};

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  PasswordResetRoute: PasswordResetRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
